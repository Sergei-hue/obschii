        private static async Task<List<string>> GeneratePngFrames_2(MemoryStream stickerStream, string text, SKColor textColor, int userFontSize, int frameCount, string tempDir, string userInfo)
        {
            string imagePathPattern = Path.Combine(tempDir, "frame_{0:D4}.png");

            SKBitmap bitmap;
            using (var ms = new MemoryStream(stickerStream.ToArray()))
            {
                bitmap = SKBitmap.Decode(ms);
            }

            List<string> framePaths = new List<string>();

            float stickerRadius = 8f;
            float textRadius = 4f;

            float centerX = bitmap.Width / 2f;
            float centerY = bitmap.Height / 2f;

            SKTypeface typeface; // Переменная для хранения шрифта
            string fontPath = "/fonts/Lobster-Regular.ttf";  // на сервере
            //string fontPath = "Lobster-Regular.ttf"; // Локально
            typeface = SKTypeface.FromFile(fontPath); // Загружаем шрифт из файла
            if (typeface == null)
            {
                Console.WriteLine("Не удалось загрузить шрифт из файла, используется системный шрифт.");
                typeface = SKTypeface.FromFamilyName("FreeSans") ?? SKTypeface.Default; // Используем запасной шрифт при ошибке
            }

            //SKTypeface typeface = SKTypeface.FromFamilyName("Lobster");

            for (int i = 0; i < frameCount; i++)
            {
                using (var surface = SKSurface.Create(new SKImageInfo(bitmap.Width, bitmap.Height, SKColorType.Rgba8888, SKAlphaType.Premul)))
                {
                    var canvas = surface.Canvas;
                    canvas.Clear(SKColors.Transparent);

                    float angle = (i * 2 * MathF.PI / frameCount);

                    // Смещения для стикера
                    float offsetXSticker = stickerRadius * MathF.Cos(angle);
                    float offsetYSticker = stickerRadius * MathF.Sin(angle);

                    // Смещения для текста
                    float offsetXText = textRadius * MathF.Cos(angle);
                    float offsetYText = textRadius * MathF.Sin(angle);

                    // Вычисляем яркость для фильтра
                    float minBrightness = 0.9f;
                    float maxBrightness = 1.3f;
                    float mid = frameCount / 2f;
                    float t = Math.Abs(i - mid) / mid;
                    float brightnessFactor = minBrightness + (maxBrightness - minBrightness) * (1 - t);

                    var colorMatrix = new float[]
                    {
                brightnessFactor, 0, 0, 0, 0,
                0, brightnessFactor, 0, 0, 0,
                0, 0, brightnessFactor, 0, 0,
                0, 0, 0, 1, 0
                    };

                    // Создаем фильтр для изменения яркости
                    var colorFilter = SKColorFilter.CreateColorMatrix(colorMatrix);

                    // Рисуем стикер с применением фильтра яркости
                    using (var paintImage = new SKPaint())
                    {
                        paintImage.ColorFilter = colorFilter;
                        canvas.DrawBitmap(bitmap, centerX + offsetXSticker - (bitmap.Width / 2), centerY + offsetYSticker - (bitmap.Height / 2), paintImage);
                    }

                    // Настраиваем кисти для текста
                    using (var paintLarge = new SKPaint
                    {
                        Color = new SKColor(255, 255, 200),
                        TextSize = userFontSize + 6,
                        IsAntialias = true,
                        Typeface = typeface,
                        Style = SKPaintStyle.Fill
                    })
                    using (var paintSmall = new SKPaint
                    {
                        Color = textColor,
                        TextSize = userFontSize,
                        IsAntialias = true,
                        Typeface = typeface,
                        Style = SKPaintStyle.Fill
                    })
                    {
                        float maxWidth = bitmap.Width - 20;
                        float lineHeight = paintLarge.FontSpacing;
                        float lineSpacing = 0.8f;

                        List<string> lines = new List<string>();
                        string[] words = text.Split(' ');

                        string currentLine = "";
                        foreach (var word in words)
                        {
                            string testLine = currentLine.Length == 0 ? word : currentLine + " " + word;
                            float testWidth = paintLarge.MeasureText(testLine);
                            if (testWidth > maxWidth)
                            {
                                if (currentLine.Length == 0)
                                {
                                    lines.Add(testLine);
                                    currentLine = "";
                                }
                                else
                                {
                                    lines.Add(currentLine);
                                    currentLine = word;
                                }
                            }
                            else
                            {
                                currentLine = testLine;
                            }
                        }
                        if (!string.IsNullOrEmpty(currentLine))
                        {
                            lines.Add(currentLine);
                        }
